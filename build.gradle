plugins {
	id 'org.springframework.boot' version "2.1.4.RELEASE"
	id "com.gorylenko.gradle-git-properties" version "2.0.0"
	id 'war'
	id 'idea'
	id 'eclipse-wtp'
}

apply plugin:  'io.spring.dependency-management'
apply plugin: com.redhat.gradle.build.plugin.XjcPlugin

group = 'com.redhat.springboot'

ext {
	springInitializrVersion = '0.6.0.RELEASE'
	jaxbVersion = '2.2.11'
	poiVersion = '4.0.1'
	mapstructVersion = '1.3.0.Final'
	springCloudVersion = 'Greenwich.RELEASE'
}

bootRun {
	args = [
		'--spring.profiles.active=local',
		'--add-opens=java.base/java.lang=ALL-UNNAMED',
		'--add-opens=java.base/java.lang.invoke=ALL-UNNAMED',
		'--add-opens=java.base/java.io=ALL-UNNAMED'
	]
}

springBoot {
	buildInfo()
}

generateGitProperties {
	onlyIf {
		!source.isEmpty()
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/libs-release' }
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
		mavenBom 'com.amazonaws:aws-java-sdk-bom:1.11.532'
	}
}

dependencies {
	compile "io.spring.initializr:initializr-web:$springInitializrVersion"
	compile "io.spring.initializr:initializr-actuator:$springInitializrVersion"
	compile 'org.springframework.boot:spring-boot-starter-web'
	compile 'org.springframework.boot:spring-boot-starter-actuator'
	compile 'org.springframework.cloud:spring-cloud-starter-sleuth'
	compile 'org.apache.commons:commons-lang3'
	compile 'com.github.derjust:spring-data-dynamodb:5.0.4'
	compile "org.apache.poi:poi:$poiVersion"
	compile "org.apache.poi:poi-ooxml:$poiVersion"
	compile 'com.amazonaws:aws-java-sdk-dynamodb'
	compile 'nl.basjes.parse.useragent:yauaa:3.3'
	compile "javax.xml.bind:jaxb-api:$jaxbVersion"
	compile "org.mapstruct:mapstruct-jdk8:$mapstructVersion"
	compileOnly 'org.springframework.boot:spring-boot-configuration-processor'
	providedCompile 'org.springframework.boot:spring-boot-starter-undertow'
	runtime 'org.springframework.security:spring-security-rsa'
	runtime 'org.springframework.boot:spring-boot-starter-validation'
	runtime "com.sun.xml.bind:jaxb-impl:$jaxbVersion"
	runtime "com.sun.xml.bind:jaxb-core:$jaxbVersion"
	runtime 'javax.activation:activation:1.1.1'
	testCompile 'org.springframework.boot:spring-boot-starter-test'
	testCompile 'io.github.swagger2markup:swagger2markup:1.3.1'
	testCompile 'io.github.robwin:assertj-swagger:0.6.0'
	testCompile 'org.codehaus.groovy:groovy-json'
	testCompile 'org.junit.jupiter:junit-jupiter-api'
	testRuntime 'org.junit.jupiter:junit-jupiter-engine'
	xjc "javax.xml.bind:jaxb-api:$jaxbVersion"
	xjc "com.sun.xml.bind:jaxb-impl:$jaxbVersion"
	xjc "com.sun.xml.bind:jaxb-xjc:$jaxbVersion"
	xjc "com.sun.xml.bind:jaxb-core:$jaxbVersion"
	xjc 'javax.activation:activation:1.1.1'
	annotationProcessor "org.mapstruct:mapstruct-processor:$mapstructVersion"
	annotationProcessor 'org.springframework:spring-context-indexer'
}

configurations.all {
	exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
	exclude group: 'org.hibernate', module: 'hibernate-validator'
}

compileJava.dependsOn processResources

xjcGeneration {
	schemas = [
		schema(schemaFile: 'maven-4.0/maven-4.0.0.xsd', javaPackageName: 'com.redhat.springinitializr.generated.maven')
	]
}

eclipse {
	classpath {
		file {
			whenMerged { classpath -> 
				classpath.entries
					.find { (it.kind == 'src') && (it.path == 'src/main/resources') }
					?.excludes += ['**/*.gradle', '**/*.java']
			}
		}
	}

	wtp {
		component {
			contextPath = "/"
		}
	}
}

eclipseWtpFacet.enabled = false

idea {
	module {
		downloadJavadoc = true
		downloadSources = true
		excludeDirs += file('src/main/resources/templates')
	}
}

tasks.withType(Test) {
	useJUnitPlatform()
	jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'
	jvmArgs '--add-opens', 'java.base/java.lang.invoke=ALL-UNNAMED'
	jvmArgs '--add-opens', 'java.base/java.io=ALL-UNNAMED'
}
